0x00000000000005fa <+0>:   push   rbp                        #добавление регистра rbp на стэк
0x00000000000005fb <+1>:   mov    rbp,rsp                    #сохранение адреса фрейма текущей функции в регистр rbp
0x00000000000005fe <+4>:   mov    DWORD PTR [rbp-0x8],0xa    #присваивание первой локальной переменной(var1) значения 10
0x0000000000000605 <+11>:  mov    DWORD PTR [rbp-0x4],0x29   #присваивание второй локальной переменной(var2) значения 41(0x29)
0x000000000000060c <+18>:  cmp    DWORD PTR [rbp-0x8],0xa    #сравнение var1 с 10(0x10)
0x0000000000000610 <+22>:  jle    0x61b <main+33>            #если var1 меньше или равно 10, "прыгнуть" на инструкцию по адресу 0x61b
0x0000000000000612 <+24>:  mov    DWORD PTR [rbp-0x4],0x2a   #если var1 больше 10, присвоить var2 значение 42 
0x0000000000000619 <+31>:  jmp    0x622 <main+40>            #"прыгнуть" на следующую после конструкции if инструкцию (0x622)
0x000000000000061b <+33>:  mov    DWORD PTR [rbp-0x4],0x0    #присвоить var2 значение 0(часть else if'а)
0x0000000000000622 <+40>:  mov    eax,0x0                    #обнулить регистр общего назначения
0x0000000000000627 <+45>:  pop    rbp                        #извлечь из стека регистр rbp 
0x0000000000000628 <+46>:  ret                               #возврат потока исполнения программы
